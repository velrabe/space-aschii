name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to server
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add host to known_hosts
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # Create a clean deployment directory
          mkdir -p deploy_package
          
          # Copy only necessary files to deployment directory
          cp -R public deploy_package/
          cp -R src deploy_package/
          cp -R server deploy_package/
          cp -R scripts deploy_package/
          cp -R config deploy_package/
          cp package.json deploy_package/
          cp package-lock.json deploy_package/
          
          # Create deployment package
          cd deploy_package
          tar -czf ../deploy.tar.gz .
          cd ..
          
          # Upload the package to the server
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/
          
          # Execute commands on the server to deploy the game
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH'
            # Create directory for the game if it doesn't exist
            mkdir -p $DEPLOY_PATH
            
            # Extract files
            tar -xzf /tmp/deploy.tar.gz -C $DEPLOY_PATH
            
            # Create assets directories if they don't exist (including backgrounds)
            mkdir -p $DEPLOY_PATH/public/assets/ships
            mkdir -p $DEPLOY_PATH/public/assets/asteroids
            mkdir -p $DEPLOY_PATH/public/assets/resources
            mkdir -p $DEPLOY_PATH/public/assets/effects
            mkdir -p $DEPLOY_PATH/public/assets/ui
            mkdir -p $DEPLOY_PATH/public/assets/backgrounds
            
            # Set proper permissions
            chmod -R 755 $DEPLOY_PATH
            
            # Run the local deploy script if it exists
            if [ -f "$DEPLOY_PATH/scripts/deploy.sh" ]; then
              cd $DEPLOY_PATH
              bash scripts/deploy.sh
            fi
          ENDSSH 