name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to server
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          USE_HTTPS: ${{ secrets.USE_HTTPS || 'yes' }}  # По умолчанию 'yes' если не указано иное
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add host to known_hosts
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # Create a clean deployment directory
          mkdir -p deploy_package
          
          # Copy only necessary files to deployment directory
          cp -R public deploy_package/
          cp -R src deploy_package/
          cp -R server deploy_package/
          cp -R scripts deploy_package/
          cp -R config deploy_package/
          cp package.json deploy_package/
          cp package-lock.json deploy_package/
          
          # Create deployment package
          cd deploy_package
          tar -czf ../deploy.tar.gz .
          cd ..
          
          # Upload the package to the server
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/
          
          # Create a server-side deployment script
          cat > deploy_server.sh << 'EOF'
          #!/bin/bash
          
          # Create directory for the game if it doesn't exist
          mkdir -p DEPLOY_PATH_PLACEHOLDER
          
          # Extract files
          tar -xzf /tmp/deploy.tar.gz -C DEPLOY_PATH_PLACEHOLDER
          
          # Create assets directories if they don't exist (including backgrounds)
          mkdir -p DEPLOY_PATH_PLACEHOLDER/public/assets/ships
          mkdir -p DEPLOY_PATH_PLACEHOLDER/public/assets/asteroids
          mkdir -p DEPLOY_PATH_PLACEHOLDER/public/assets/resources
          mkdir -p DEPLOY_PATH_PLACEHOLDER/public/assets/effects
          mkdir -p DEPLOY_PATH_PLACEHOLDER/public/assets/ui
          mkdir -p DEPLOY_PATH_PLACEHOLDER/public/assets/backgrounds
          
          # Set proper permissions
          chmod -R 755 DEPLOY_PATH_PLACEHOLDER
          
          # Run the local deploy script if it exists
          if [ -f "DEPLOY_PATH_PLACEHOLDER/scripts/deploy.sh" ]; then
            cd DEPLOY_PATH_PLACEHOLDER
            export DOMAIN_NAME="DOMAIN_NAME_PLACEHOLDER"
            export USE_HTTPS="USE_HTTPS_PLACEHOLDER"
            sudo bash scripts/deploy.sh
          fi
          EOF
          
          # Replace placeholders with actual values
          sed -i "s|DEPLOY_PATH_PLACEHOLDER|$DEPLOY_PATH|g" deploy_server.sh
          sed -i "s|DOMAIN_NAME_PLACEHOLDER|${DOMAIN_NAME:-_}|g" deploy_server.sh
          sed -i "s|USE_HTTPS_PLACEHOLDER|${USE_HTTPS:-yes}|g" deploy_server.sh
          
          # Upload deployment script
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy_server.sh $DEPLOY_USER@$DEPLOY_HOST:/tmp/
          
          # Execute the deployment script on the server
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "sudo bash /tmp/deploy_server.sh" 